% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_gene_coverage.R
\name{plot_gene_coverage}
\alias{plot_gene_coverage}
\title{Plot probability of peak being assigned to a gene vs. gene length}
\usage{
plot_gene_coverage(peaks, locusdef = "nearest_tss",
  genome = supported_genomes(), mappability = NULL, legend = TRUE,
  xlim = NULL)
}
\arguments{
\item{peaks}{A \code{data.frame}, or tab-delimited text file (BED, narrowPeak,
broadPeak, etc) with the first three columns being chrom, start, and end. The
data frame should have at least 3 columns: chrom, start, and end. Chrom
should follow UCSC convention, e.g. "chrX".}

\item{locusdef}{A string denoting the gene locus definition to be used, or
the full path to a user-defined locus definition file. A gene locus definition
controls how peaks are assigned to genes. See \code{\link{supported_locusdefs}}
for a list of supported definitions built-in. If using a user-specified file,
the file must have 4 columns: gene_id, chrom, start, end and be tab-delimited.}

\item{genome}{A string indicating the genome upon which the peaks file is
based. Supported genomes are listed by the \code{\link{supported_genomes}} function.}

\item{mappability}{One of \code{NULL}, a file path to a custom mappability file,
or an \code{integer} for a valid read length given by \code{supported_read_lengths}.
If a file, it should contain a header with two column named 'gene_id' and 'mappa'.
Gene IDs should be Entrez IDs, and mappability values should range from 0 and 1.
Default value is NULL.}

\item{legend}{If true, a legend will be drawn on the plot.}

\item{xlim}{Set the x-axis limit. NULL means select x-lim automatically.}
}
\value{
A trellis plot object.
}
\description{
Create a plot showing the probability of a gene being assigned a peak given
its locus length. The plot shows an empirical fit to the data using a binomial
smoothing spline.
}
\examples{

# Spline plot for E2F4 example peak dataset.
data(peaks_E2F4, package = 'chipenrich.data')
peaks_E2F4 = subset(peaks_E2F4, peaks_E2F4$chrom == 'chr1')
plot_gene_coverage(peaks_E2F4, genome = 'hg19')

}
